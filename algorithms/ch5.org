#+AUTHOR: Joshua Jolley
#+TITLE: Chapter 5 Exercises

* Exercise 1
** A - Pseudocode
   Rather than use pseudo-code, I decided to use this exercise as an opportunity to 
   practice my elisp. (Yes, elisp instead of clojure!  It's a miracle!)
    

#+BEGIN_SRC emacs-lisp :tangle ./recursive-max.el 
; A helper function to clean up the recursive-max call
(defun first-half (lst)
  (butlast lst (/ (length lst) 2))
)

; A second helper function for the same reason
(defun last-half (lst)
  (last lst (/ (length lst) 2))
)

(defun recursive-max (lst)
  (print lst)
  (if (<= (length lst) 2)
      (max (first lst) (first (last lst))) ; I like the first last trick. 
      (setq max_first (recursive-max (first-half lst)))
      (setq max_last (recursive-max (last-half lst)))
      (max max_first max_last)
  )
)

(defun print-max-index (lst)
  (position (recursive-max lst) lst)
)

(print-max-index '(1 3 2 7 5 7)) ; 3
#+END_SRC

** B - Duplicate key output
   This will always output the first instance of the max value

** C - Solve the recurrence
   T(2) = 1
   T(n)        = 2T(n/2) + 2^0
   2T(n/2)     = 2^2T(n/2^2) + 2^1
   2^2T(n/2^2) = 2^3T(n/2^3) + 2^2
        .
        .
        .
               = 2^(k - 1)T(n/2^(k - 1)) + 2^(k - 2)
	       = 2^(k - 1)T(n/2^(k - 1)) + SUM from i = 0 to k - 2 of 2^i
	  T(n) = n/2 * T(2) + (n - 2)
               = 3/2n - 2 

   I'm not sure how to work this into the forumla above, but there is an
   additional n comparisons (worst case) done once, regardless of the input size to find
   the position of the max.  This gives us 5/2n -2

** D - Comparison to brute force
   Sadly, the brute force algorithm is faster than the recursive algorithm for
   all inputs greater than 4.

   For reference:
   #+BEGIN_SRC emacs-lisp :tangle no
   (defun find-max (lst mymax)
      (if (eq nil lst)
         mymax
         (find-max (rest lst) (max mymax (first lst)))
      )
   )

   (defun brute-print-max-index (lst)
      (position (find-max lst 0) lst)
)
  
   (brute-print-max-index '(1 3 2 7 5 7))
   #+END_SRC

   This reduces to 2n in the worst case, n + 1 in the best case. 
   

* Exercise 2
** A
   T(n)       = 4T(n/2)     + 4^0n, T(1) = 1
   4T(n/2)    = 4^2T(n/2^2) + 4n
   4^2(n/2^2) = 4^3T(n/2^3) + 4^2n
        .
        .
        .
   T(n) = 4^k * T(n/2) + 4^k * n
        = n^2 * 1 + SUM from i = 0 to k - 1 of 4^i * n
        = n^2 + 1/3 * (4^k - 1)n
        = n^2 + 1/3 * (n^2 - 1)n
        = n^2 + 1/3 * n^3 - 1/3 * n
        = (n^3)/3 + n^2 - n/3

** B
   This function is going to progress exactly like A, replacing n with n^2.
   Skipping the boring parts, this leads us to
   
   T(n) = n^2 + 1/3 (n^2 - 1)n^2
        = n^2 + 1/3 n^4 - 1/3 *  n^2
        = (n^4)/3 + (2n^2)/3

** C
   Using the same reasoning as B, but with n^3 instead of n^2 we get
   
   T(n) = n^2 + 1/3 * (n^2 - 1)n^3
        = n^2 + 1/3 * n^5 - 1/3 * n^3
        = (n^5)/3 - (n^3)/3 + n^2
    
