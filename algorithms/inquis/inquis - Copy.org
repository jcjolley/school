
#+AUTHOR: Joshua Jolley
#+TITLE: Inquisitiveness

* Introduction
I've noticed in my studies that for most topics, I don't understand a particular concept until I have implemented it. 
There is something special about moving from an idea to a result that changes the way I think about
a topic.  Throughout my studies here at BYU-I I've implemented many n^2 (and worse!) algorithms,
and while I've briefly explored orders of growth before, I've never done it as rigorously as this.
I hope my grasp of this grows as fast or faster than the algorithms I'm about to study.

* Specs
/Consider these to be the same for all tests/
Hardware: Intel i5-4670 @ 3.40 GHZ, 8GB Ram
Compiler: GCC 4.9.0 (via Windows 10 BASH) with -03
Timers: BASH BUILTIN time (via Windows 10 BASH)
Assumptions: I'm the only user logged in, and I'm running no other processes that are demanding on the CPU.
* Part 1
** Some Background
   I implemented a bubble sort and a selection sort.  Each program needs an input size (n) and the number of
times you want the algorithm to run.  Each program then returns the number of times the critical operation
occured.  I then wrote a bash script to exercise these programs, running with an input size that grows by a
power of 10 each iteration, and with the number of runs being decreased by a factor of 10 each time. 

The output and running time of the programs are collected into a table and displayed at the end. I will attempt
to tangle the script and the source code for both programs for your perusal.
** Bash Script
#+BEGIN_SRC sh :tangle 
#!/bin/bash

BUBBLE_TABLE="Bubble Sort: |"
SELECT_TABLE="Select Sort: |"

#Run it more times on the smaller inputs to get a better average
POW=$(bc <<< "$1 - 1")
RUNS=$(bc <<< "10^$POW")

for i in `seq 1 $1`;
do
    #Input ranges from 10 - 1,000,000 
    N=$(bc <<< "10^$i")

    #Time the bubble run and add the results to the bubble table
    TEMP=$(/usr/bin/time ./bubble $N $RUNS 2>&1) 
    TIME=$(echo "$TEMP" | awk -v RS="" {'print $2'})
    CRIT_OPS=$(echo "$TEMP" | awk -v RS="" {'print $1'})
    BUBBLE_TABLE="$BUBBLE_TABLE OPS:$CRIT_OPS TIME:$TIME RUNS:$RUNS | "

    #Time the select run and add the results to the select table
    TEMP=$(/usr/bin/time ./selection $N $RUNS 2>&1)
    TIME=$(echo "$TEMP" | awk -v RS="" {'print $2'})
    CRIT_OPS=$(echo "$TEMP" | awk -v RS="" {'print $1'})
    SELECT_TABLE="$SELECT_TABLE OPS:$CRIT_OPS TIME:$TIME RUNS:$RUNS | "

    #This prevents us from running less than once for the big ones.
    echo "Runs: $RUNS"
    if [ $RUNS -gt 1 ]
    then
	RUNS=$(bc <<< "$RUNS/10")
    fi
done 

printf "%s\n%s" "$BUBBLE_TABLE" "$SELECT_TABLE"

#+END_SRC

** Bubble Sort - n^2
*** Algorithm
   
#+BEGIN_SRC: c++
#include <iostream>
#include <cstdlib>
#include <time.h>

using namespace std;
int main(int argc, char** argv)
{
   if (argc != 3)
   {
      cout << "USAGE: bubble [n] [numRuns]" << endl;
      exit(1);
   }

   srand(time(NULL));
   long long count = 0;
   int n = atoi(argv[1]);
	const int RUNS = atoi(argv[2]);
   int ** arr = new int*[RUNS];

   //create 100 random arrays of length n
   for (int i = 0; i < RUNS; i++)
   {
      arr[i] = new int[n];
      for (int j = 0; j < n; j++)
      {
         arr[i][j] = rand() % 100;
      }
   }

       //start RUNS bubble sorts
       for (int run = 0; run < RUNS; run++)
       {	
	  bool swapped = true; 
	  while (swapped)
	  {
	     swapped = false;
	     for(int i = 0; i < n - 1; i++)
	     {
		count++; //this comparison is the critical op
		if (arr[run][i] > arr[run][i + 1])
		{
		   int temp = arr[run][i];
		   arr[run][i] = arr[run][i + 1];
		   arr[run][i + 1] = temp; 
		   swapped = true;
		}
	     }
	  }
       }

   //clean up the mess we made of the heap
   for (int i = 0; i < RUNS; i++)
   {
      delete [] arr[i];
   }
   delete [] arr;

   //print out the average number of critical operations.
   cout << count / RUNS << endl;
}
#+END_SRC

*** Data
*Timing Table*          
Bubble Sort | OPS:67 TIME:0.00user RUNS:10000 |  OPS:8767 TIME:0.04user RUNS:1000 |  OPS:954534 TIME:0.32user RUNS:100 |  OPS:98165182 TIME:3.95user RUNS:10 |  OPS:9885001149 TIME:43.89user RUNS:1 |                                                                                                                                                                                         

Best case: When the list is presorted. n
Average case: Just under n^2
Worst case: When the list is reverse sorted.  n^2
** Algorithm 2 - n^2
*** Algorithm
#+BEGIN_SRC c++ :tangle
#include <iostream>
#include <cstdlib>
#include <time.h>

using namespace std;
int main(int argc, char** argv)
{
   if (argc != 3)
   {
      cout << "USAGE: bubble [n] [numRuns]" << endl;
      exit(1);
   }

   srand(time(NULL));
   long long count = 0;
   int n = atoi(argv[1]);
	const int RUNS = atoi(argv[2]);

   int ** arr = new int*[RUNS];

   //create RUNS random arrays of length n
   for (int i = 0; i < RUNS; i++)
   {
      arr[i] = new int[n];
      for (int j = 0; j < n; j++)
      {
         arr[i][j] = rand() % 100;
      }
   }

   //start 100 selection sorts
   for (int run = 0; run < RUNS; run++)
   {
      int min = 0;
      for (int i = 0; i < n; i++) {
         for (int j = i, min = i; j < n; j++) {
            count++; //the comparison in this if is the critical operation
            if (arr[run][j] < arr[run][min]) {
               min = j;
            }
         }
      int temp = arr[run][i];
      arr[run][i] = arr[run][min];
      arr[run][min] = temp;
  }
}
     
   //clean up the mess we made of the heap
   for (int i = 0; i < RUNS; i++)
   {
      delete [] arr[i];
   }
   delete [] arr;

   //print out the average number of critical operations.
   cout << count / RUNS << endl;
}
#+END_SRC
*** Data
*Timing Table*          
Select Sort: | OPS:55 TIME:0.00user RUNS:10000 |  OPS:5050 TIME:0.01user RUNS:1000 |  OPS:500500 TIME:0.10user RUNS:100 |  OPS:50005000 TIME:1.10user RUNS:10 |  OPS:5000050000 TIME:11.09user RUNS:1 | 

The best case, worst caste, and average case of this sort are all the same. For small runs, its n^1.75ish, but as n grows, it gets closer and closer to n^2

The selection sort is faster on average than the bubble sort.  You would only ever
want to use the bubble sort on lists that you think may already be sorted.

* Part 2
** Algorithm 3 - n log n
*** Algorithm
*** Data
*Timing Table*          
| n       |  1  | 10 | 100 | 1,000 | 10,000 | 100,000 | 1,000,000 |
| time(s) |     |    |     |       |        |         |           |

Best case:
Average case:
Worst case:


** Algorithm 4 - n log n
*** Algorithm
*** Data
*Timing Table*          
| n       |  1  | 10 | 100 | 1,000 | 10,000 | 100,000 | 1,000,000 |
| time(s) |     |    |     |       |        |         |           |

Best case:
Average case:
Worst case:


** Comparisons
* Conclusion
I didn't realize before doing this assignment that the selection sort had a fixed number of runs.
This is kind of neat.  I had a lot of fun getting my bash script and c++ programs setup just so in order to make
automating the runs easier.  The framework I setup should prove useful for part two of this exploration.

