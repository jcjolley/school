;r_0 = a = 98
;r_1 = b = 55

;98 = 55*1 + 43, so q_1 = 1 and r_2 = 42
;55 = 43*1 + 12, so q_2 = 1
;43 = 12*3 + 7 so q_3 = 3
                                        ;12 = 7*1

(setq list1 '(1 2 3))
(setq list2 '(4 5 6))

(defun empty (lst)
  (zerop (length lst)))

(defun merge (list1 list2)
  (cond ((empty list1) list2)
        ((empty list2) list1)
        (t (let ((e1 (first list1)) ;t is true, this is the default case
                 (e2 (first list2)))
             (if (< e1 e2)
             (cons e1 (merge (rest list1) list2)) ;cons adds an item to a list
             (cons e2 (merge list1 (rest list2)))
             ))))
  )

(merge list1 list2)

(defun mergsort (lst)
  (if (= 1 (length lst))
      lst
    (let* ((i (/ (length lst) 2))
          (list1 (mergesort (take lst i))) ; gets the first half of the list
          (list2 (mergesort (drop lst i))); gets the second half of the list
          (merge list1 list2))))

(defun take (lst i)
  (if (> i 0)
      (cons (first lst) (take (rest lst) (1- i)))
    nil
  ))

(defun drop (1st i)
  (if (> i 0)
      (drop (rest lst) (1i i))
    lst
      ))

