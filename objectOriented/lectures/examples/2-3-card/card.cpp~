/***********************************************************************
* Source File:
*    Implementation of the Card class.
* Summary: 
*    This file will implement all the methods described in card.h
************************************************************************/

#include <iostream>
#include <string>
#include <cassert>
#include "card.h"
using namespace std;

/*************************************************************
 *************************************************************
 ******************** GETTERS AND SETTERS ********************
 *************************************************************
 *************************************************************/

/*******************************
 * I SUIT
 * Find the index from the suits[] array
 * of a given letter. Does not reference
 * any member variable in this
 *********************************/
int Card :: iSuit(char chSuit) const
{
   // look up the suit index;
   chSuit = tolower(chSuit);
   for (int i = 0; i < 4; i++)
      if (chSuit == SUITS[i])
         return i;
   return -1;
}

/********************************
 * I RANK
 * Find the index from the RANKS array
 * of a given letter.  Does not reference
 * any member variable in this
 ********************************/
int Card :: iRank(char chRank) const
{
   // either 0 or 1 is 10
   if (chRank == '1')
      chRank = '0';

   // look up the number
   chRank = tolower(chRank);
   for (int i = 0; i < 13; i++)
      if (chRank == RANKS[i])
         return i;

   return -1;
}

/***********************************
 * SET SUIT
 * RETURN:    Bool         (were we successful in setting the value?)
 * PARAMETER: character    (whatever makes sense for this)
 * METHOD:    not const    (we are intentionally changing this)
 ***********************************/
bool Card :: setSuit(char chSuit)
{
   // paranoia
   assert(this->validate());

   // look up the suit index;
   int i = iSuit(chSuit);

   // bail if invalid
   if (i == -1)
      return false;

   // set the value
   value = (value % 13) + (i * 13);
   assert(this->validate());
   return true;
}

/********************************
 * SET RANK
 * RETURN:    Bool         (were we successful in setting the value?)
 * PARAMETER: character    (whatever makes sense for this)
 * METHOD:    not const    (we are intentionally changing this)
 *******************************/
bool Card :: setRank(char chRank)
{
   // paranoia
   assert(this->validate());

   // look up the rank
   int i = iRank(chRank);

   // bail if invalid
   if (i == -1)
      return false;

   // set the value
   value = i + (value / 13 * 13);
   assert(this->validate());
   return true;
}


/*************************************************************
 *************************************************************
 ********************** HELPER METHODS ***********************
 *************************************************************
 *************************************************************/

/*****************************
 * VALIDATE
 *****************************/
bool Card :: validate()
{
   if (value == INVALID)
      return true;
   
   int iRank = value % 13;
   int iSuit = value / 13;

   return (iRank >= 0  &&
           iRank <  13 &&
           iSuit >= 0  &&
           iSuit <  4);
}

